A binary tree is a hierarchical data structure in which each node has at most two children, 
referred to as the left child and the right child. Unlike Binary Search Trees (BSTs), 
a binary tree does not impose rules such as "left-side values must be smaller
than the root, and right-side values must be greater than the root".

Key characteristics of a binary tree:
- Each node can have zero, one, or two children.
- There are no constraints on the values of the nodes or their arrangement.
- The structure is purely defined by the parent-child relationships.

The definition of a binary tree is based purely on its structure: each node
can have at most two children. It does not enforce rules on the number of
nodes, their levels, or how values are arranged.

--------------------------------------------------------------------------------------------------

We can implement binary trees using linked lists or arrays.

Here, h = height, n = size of the binary tree.
- Insertion: O(h) (worst case O(n))
- Deletion: O(h) (worst case O(n))
- Find: O(h) (worst case O(n))


------------------------ Real-life applications of binary trees ------------------------

1. Expression Trees: Used in compilers to represent expressions.
2. Huffman Coding Trees: Used in data compression algorithms.
3. Binary Heaps: Used in priority queues.
4. Decision Trees: Used in machine learning for decision-making processes.
5. Routing Tables: Used in network routers.
6. File System Hierarchies: Used to represent directories and files.
7. Syntax Trees: Used in compilers to represent the structure of program code.
8. Databases: Used in indexing to improve search operations.


-------------------------- Terminologies used in Binary Trees --------------------------

1. Node: A fundamental part of a binary tree that contains data and links to its children.
    Example: 
         1
        / \
      2    3
    Here, 1, 2, and 3 are nodes.

2. Edge: A link between two nodes.
    Example: 
         1
        / \
      2    3
    The connections (1-2) and (1-3) are edges.

3. Root: The topmost node of a binary tree.
    Example: 
         1
        / \
      2    3
    Here, 1 is the root.

4. Level: The number of edges on the path from the root to the node.
    Example: 
         1 (Level 0)
        / \
      2   3 (Level 1)
    The root node is at level 0, and its children are at level 1.

5. Height: The number of edges on the longest path from the root to a leaf.
    Example: 
         1
        / \
      2    3
          /
         4
    The height of this tree is 2 (path 1-3-4).

6. Sibling: Nodes that share the same parent.
    Example: 
         1
        / \
      2    3
    Here, 2 and 3 are siblings.

7. Parent: A node that has a link to one or more child nodes.
    Example: 
         1
        / \
      2    3
    Here, 1 is the parent of 2 and 3.

8. Child: A node that has a parent node.
    Example: 
         1
        / \
      2    3
    Here, 2 and 3 are children of 1.

9. Degree: The number of children a node has.
    Example: 
         1
        / \
      2    3
    The degree of node 1 is 2.

10. Size: The total number of nodes in the binary tree.
     Example: 
         1
        / \
      2    3
    The size of this tree is 3.

11. Leaf: A node that does not have any children.
     Example: 
         1
        / \
      2    3
          /
         4
    Here, nodes 2 and 4 are leaves.

12. Internal Node: A node that has at least one child.
     Example: 
         1
        / \
      2    3
          /
         4
    Here, nodes 1 and 3 are internal nodes.

13. Ancestor: A node that is located on the path from the root to a given node.
     Example: 
         1
        / \
      2    3
          /
         4
    Here, 1 and 3 are ancestors of node 4.

14. Descendant: A node that is located on the path from a given node to any leaf.
     Example: 
         1
        / \
      2    3
          /
         4
    Here, 3 and 4 are descendants of node 1.


-------------------------------------- Types of Binary Trees --------------------------------------

1. Full Binary Tree:
    - Definition: A binary tree in which every node has either 0 or 2 children.
    - Example:
            1
          /  \
         2    3
        / \  / \
      4   5  6  7

2. Complete Binary Tree:
    - Definition: A binary tree in which all levels are completely filled except possibly the last level, which is filled from left to right.
    - Example:
            1
          /   \
         2     3
        / \   /
       4   5 6

3. Perfect Binary Tree:
    - Definition: A binary tree in which all internal nodes have two children and all leaves are at the same level.
    - Example:
            1
          /   \
         2     3
        / \   / \
       4   5 6   7

4. Balanced Binary Tree:
    - Definition: A binary tree in which the height of the left and right subtrees of any node differ by at most one.
    - Example:
            1
          / \
         2   3
        / \
       4   5

5. Degenerate (or Pathological) Tree:
    - Definition: A binary tree in which each parent node has only one child. This tree essentially behaves like a linked list.
    - Example:
            1
             \
              2
                \
                 3
                  \
                    4

6. Skewed Binary Tree:
    - Definition: A binary tree in which all the nodes have only one child, either left or right.
    - Left-Skewed Example:
            1
          /
         2
        /
      3
     /
    4
    - Right-Skewed Example:
            1
             \
              2
                \
                 3
                  \
                    4


--------------------------------------- Operations of Trees ---------------------------------------

1. Insertion:
  - Description: Adding a new node to the tree.
  - Example: 
    Before Insertion:
        1
       / \
      2   3
    After Insertion (insert 4):
        1
       / \
      2   3
     /
    4
  - Complexity: O(h) where h is the height of the tree.

2. Deletion:
  - Description: Removing a node from the tree.
  - Example: 
    Before Deletion:
        1
       / \
      2   3
     /
    4
    After Deletion (delete 2):
      1
       \
        3
  - Complexity: O(h) where h is the height of the tree.

3. Traversal:
  - Description: Visiting all the nodes in the tree in a specific order.
  - Types:
    a. In-order (Left, Root, Right)
      - Example: 
        Tree:
            1
           / \
          2   3
        In-order Traversal: 2, 1, 3
    
    b. Pre-order (Root, Left, Right)
      - Example: 
        Tree:
            1
           / \
          2   3
        Pre-order Traversal: 1, 2, 3
    
    c. Post-order (Left, Right, Root)
      - Example: 
        Tree:
            1
           / \
          2   3
        Post-order Traversal: 2, 3, 1
    
    d. Level-order (Breadth-First)
      - Example: 
        Tree:
            1
           / \
          2   3
        Level-order Traversal: 1, 2, 3
  - Complexity: O(n) where n is the number of nodes.

4. Searching:
  - Description: Finding a node in the tree.
  - Example: 
    Tree:
        1
       / \
      2   3
    Search for 3: Found
  - Complexity: O(h) where h is the height of the tree.

5. Finding Minimum/Maximum:
  - Description: Finding the node with the minimum/maximum value.
  - Example: 
    Tree:
        1
       / \
      2   3
    Minimum: 1
    Maximum: 3
  - Complexity: O(h) where h is the height of the tree.

6. Height Calculation:
  - Description: Calculating the height of the tree.
  - Example: 
    Tree:
        1
       / \
      2   3
     /
    4
    Height: 2
  - Complexity: O(n) where n is the number of nodes.

7. Size Calculation:
  - Description: Calculating the total number of nodes in the tree.
  - Example: 
    Tree:
        1
       / \
      2   3
     /
    4
    Size: 4
  - Complexity: O(n) where n is the number of nodes.
